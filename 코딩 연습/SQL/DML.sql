--DML문
--INSERT
DESC DEPARTMENTS; -- 테이블의 구조를 빠르게 확인
--1ST (컬럼을 정확히 일치시키는 경우)
INSERT INTO DEPARTMENTS VALUES(280, 'DEVELOPER', NULL, 1700);
SELECT * FROM DEPARTMENTS;

--DML문은 트랜잭션이 항상 적용이 됩니다.
ROLLBACK;

--2ND (컬럼을 지정해서 넣는 경우)
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID) VALUES (280,'DEVELOPER',1700);
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID, MANAGER_ID) VALUES (290,'DBA',1700,100);

--INSERT구문도 서브쿼리가 됩니다.
--실습을 위한 사본 테이블 생성
CREATE TABLE EMPS AS (SELECT * FROM EMPLOYEES WHERE 1 = 2); -- EMPS테이블 만드는 데 데이터는 복제X
DESC EMPS;
SELECT * FROM EMPS;
--1ST -- 서브쿼리로 조회한 데이터를 넣음
INSERT INTO EMPS (EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
(SELECT EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN');
--2ND
INSERT INTO EMPS (EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
VALUES ((SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Lex'),'EXAMPLE','EXAMPLE',SYSDATE, 'EXAMPLE');
--VALUES(서브쿼리, 값, 값, 값)
SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'Lex';

--------------------------------------------------------------------------------
--UPDATE구문
SELECT * FROM EMPS WHERE EMPLOYEE_ID = 120;
UPDATE EMPS SET FIRST_NAME = 'HONG', SALARY = 3000, COMMISSION_PCT = 0.1 WHERE EMPLOYEE_ID = 120;
UPDATE EMPS SET FIRST_NAME = 'HONG'; -- 전부 다 바뀜
ROLLBACK;

--UPDATE문 서브쿼리
UPDATE EMPS SET (MANAGER_ID, JOB_ID, SALARY)
=(SELECT MANAGER_ID, JOB_ID, SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = 201)
WHERE EMPLOYEE_ID = 120;

--------------------------------------------------------------------------------
--DELETE구문
--삭제하기 전에 SELECT로 삭제할 데이터를 꼭 확인하세요.
SELECT * FROM EMPS WHERE EMPLOYEE_ID = 121;
DELETE FROM EMPS WHERE EMPLOYEE_ID = 120;
--DELETE 서브쿼리
DELETE FROM EMPS WHERE JOB_ID = (SELECT JOB_ID FROM EMPS WHERE EMPLOYEE_ID = 121);

-- 모든 데이터가 전부 지워질 수 있는 것은 아님
SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES;
DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID = 50; -- 50번 부서는 EMPLOYEE 테이블에서 참조되고 있기 때문에 삭제가 일어나면 참조무결성 제약을 위배됩니다. 삭제가 안됨!

------------------------------------------------------------------------
-- MERGE문 : 데이터가 있으면 UPDATE, 없으면 INSERT를 수행하는 병합구문
SELECT * FROM EMPS;
ROLLBACK;

-- 1ST : : 동일한 테이블 구조를 가지고 있는 다른 테이블로부터 데이터를 옮길 떄 
MERGE INTO EMPS E1 -- MERGE를 시킬 타겟테이블
USING (SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%MAN') E2 -- 병합할 테이블(서브쿼리)
ON (E1.EMPLOYEE_ID = E2.EMPLOYEE_ID) -- E1과 E2 데이터가 연결되는 조건
WHEN MATCHED THEN -- 일치할 때 수행할 작업
    UPDATE SET E1.SALARY=E2.SALARY, E1.COMMISSION_PCT = E2.COMMISSION_PCT
WHEN NOT MATCHED THEN -- 일치하지 않을 때 수행할 작업
    INSERT (EMPLOYEE_ID,LAST_NAME,EMAIL,HIRE_DATE,JOB_ID)
    VALUES (E2.EMPLOYEE_ID,E2.LAST_NAME,E2.EMAIL,E2.HIRE_DATE,E2.JOB_ID);

-- 2ND : MERGE문으로 직접 특정 데이터에 값을 넣고자 할 때 사용할 수 있음
MERGE INTO EMPS E1
USING DUAL
ON (E1.EMPLOYEE_ID = 200)
WHEN MATCHED THEN
    UPDATE SET E1.SALARY =10000,
               E1.HIRE_DATE = SYSDATE
WHEN NOT MATCHED THEN
    INSERT(LAST_NAME,EMAIL,HIRE_DATE,JOB_ID)
    VALUES('EXAMPLE','EXAMPLE',SYSDATE,'EXAMPLE');
    
SELECT * FROM EMPS;

------------------------------------------------------------------------------------
-- CTAS(CREATE TABLE AS SELECT)
-- 사본 테이블 만들기(연습용)
CREATE TABLE EMP1 AS (SELECT * FROM EMPLOYEES);
SELECT * FROM EMP1;
CREATE TABLE EMP2 AS (SELECT * FROM EMPLOYEES WHERE 1 =2 ); -- 테이블 구조만 복사
SELECT * FROM EMP2;

DROP TABLE EMP1; -- 테이블 삭제
DROP TABLE EMP2; 