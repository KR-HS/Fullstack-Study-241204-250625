-- WHERE 절
SELECT * FROM EMPLOYEES;

SELECT FIRST_NAME, JOB_ID FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG';
SELECT * FROM EMPLOYEES WHERE SALARY >=15000;
SELECT * FROM EMPLOYEES WHERE SALARY < 10000;
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID <>50; -- 같지 않음
SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'STEVEN'; -- 저장된 데이터 값은 대소문자 구분
SELECT * FROM EMPLOYEES WHERE HIRE_DATE = '04/01/30'; -- 날짜도 문자열로 찾으면 됨
SELECT * FROM EMPLOYEES WHERE HIRE_DATE<='04/01/30'; -- 날짜는 크기 비교 가능

-- BETWEEN A AND B (이상 - 이하)
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 10000 AND 15000;
SELECT * FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '03/01/01' AND '03/12/31';


-- IN 연산자
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (50,60,70);
SELECT * FROM EMPLOYEES WHERE JOB_ID IN('IT_PROG','AD_VP');

-- LIKE 연산자
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '03%'; -- 03으로 시작하는
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '%01%'; -- 01으로 끝나는
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '%05%'); -- 05가 들어간 
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE'_ar%'; == _ 는 자루그
SELECT * FROM EMPLOYEES WHERE HIRE_DATE LIKE '___05%';

-- IS NULL, IS NOT NULL
SELECT * FROM EMPLOYEES;
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT =NULL; --X
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NULL;
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;

-- AND, OR   - AND 가 OR보다 연산순위가 빠르다.
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' OR SALARY>=5000; -- 둘중 하나만 만족해도 나옴
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' AND SALARY>=5000; -- 둘다 만족하는
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'IT_PROG' OR JOB_ID='FI_MGR' AND SALARY>=5000;
SELECT * FROM EMPLOYEES WHERE (JOB_ID = 'IT_PROG' OR JOB_ID='FI_MGR') AND SALARY>=5000;

-- NOT 부정의 의미
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID NOT IN (50,60,70);
SELECT * FROM EMPLOYEES WHERE JOB_ID LIKE '%IT%';

-- ORDER BY 구문
SELECT * FROM EMPLOYEES ORDER BY SALARY; -- ASC가 DEFAULT
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC;
SELECT * FROM EMPLOYEES ORDER BY DEPARTMENT_ID, SALARY DESC; -- 먼저 부서아이디로 오름차순 정렬, 둥순위에 대해서 SALARY로 내림차순 정렬

SELECT FIRST_NAME, SALARY * 12 AS 연봉 FROM EMPLOYEES ORDER BY 연봉 DESC; -- 컬럼 ALIAS를 정렬에서 사용 가능
-- SELECT FIRST_NAME, SALARY * 12 AS 연봉 FROM EMPLOYEES WHERE 연봉 >=1000; -- 오류

SELECT FIRST_NAME, SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50 ORDER BY FIRST_NAME;